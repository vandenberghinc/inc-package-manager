#!/usr/bin/env bash

# functions.
function osinfo() {
    user=$(echo $USER)
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        os="linux"
        group="root"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        os="osx"
        group="wheel"
    elif [[ "$OSTYPE" == "cygwin" ]]; then
       os="posix"     # POSIX compatibility layer and Linux environment emulation for Windows
       group="root"
    elif [[ "$OSTYPE" == "msys" ]]; then
        os="mysys"    # Lightweight shell and GNU utilities compiled for Windows (part of MinGW)
        group="root"
    elif [[ "$OSTYPE" == "win32" ]]; then
        os="win32"    # I'm not sure this can happen.
        group="root"
    elif [[ "$OSTYPE" == "freebsd"* ]]; then
        os="freebsd"    # ...
        group="root"
    else
        os="unknown"    # Unknown.
        group="root"
    fi
    #echo "Operating system: "$os
}
function argument_present() {
    c=0
    success="false"
    for var in "$@"
    do
        if (( c > 0 )) ; then
            if [ "$var" == "$1" ] ; then
                success="true"
                break
            fi
        fi
        ((c=c+1))
    done
    echo $success
}
function get_argument() {
    c=0
    success="false"
    value="none"
    for var in "$@"
    do
        if (( c > 0 )) ; then
            if [ "$var" == "$1" ] ; then
                success="true"
            elif [ "$success" == "true" ] ; then
                value=$var
                break
            fi
        fi
        ((c=c+1))
    done
    echo $value
}

# settings.
alias="inc-package-manager"
package="/usr/local/lib/$alias/"
database="/etc/$alias/"
pypi_package="true"
create_alias="true"
pypi_package_name="package_manager"

# defaults.
osinfo
requirements_dir=$(dirname "$0")
current_installation=${requirements_dir///requirements/}
if [[ "$pypi_package" == "true" ]] ; then
    current_installation=${current_installation///$pypi_package_name/}"/" 
fi
if [[ ! "$requirements_dir" =~ "/$pypi_package_name//requirements" ]] ; then
    echo "Error: Invalid installer path $requirements_dir. The installer requires to be located at: /path/to/source/$pypi_package_name/requirements/installer. Current requirements path: $requirements_dir"
    exit 1
fi
if [[ "$alias" == "" ]] ; then
    echo "Error: Specify the alias variable in installer script: $current_installation//requirements/installer."
    exit 1
fi
if [ $(get_argument "--user" $@) != "none" ] ; then
    user=$(get_argument "--user" $@)
fi

# install source code.
if [[ "$package" != "" ]] ; then
    if [[ "$current_installation" != "$package" ]] ; then
        sudo rm -fr $package
        sudo mkdir $package
        sudo chmod 770 $package
        sudo chown $user:$group $package
        cp -r $current_installation $package
        sudo chmod 770 $package
        sudo chown $user:$group $package
    else 
        sudo chmod 770 $package
        sudo chown $user:$group $package
    fi
fi

# check database.
if [ "$database" != "" ] && [ ! -d "$database" ]; then
    sudo mkdir $database
    sudo chmod 770 $database
    sudo chown $user:$group $database
fi

# install dependencies.
# osx.

if [ "$os" == "osx" ]; then

    #    -    check HomeBrew:
    existance=$(command -v /usr/local/bin/brew)
    if [ "$existance" != "/usr/local/bin/brew" ] ; then
        echo "HomeBrew is not installed."
        echo "Installing HomeBrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)" && brew doctor
    fi

    # python.
    existance=$(command -v /usr/local/bin/python3)
    if [ "$existance" != "/usr/local/bin/python3" ] ; then
        brew install python3
    fi

# linux.
elif [ "$os" == "linux" ]; then
    echo "Installing Linux requirements..."

    # update.
    sudo apt-get -y update
    sudo apt-get -y upgrade

    # network.
    sudo apt-get -y install net-tools

    # python:
    sudo apt-get -y upgrade python3
    sudo apt-get -y install libjpeg-dev zlib1g-dev build-essential cmake pkg-config libx11-dev libatlas-base-dev libgtk-3-dev libboost-python-dev python-dev python3-dev python3-pip python3-venv python3-setuptools python3-pip openssh-client openssh-server

# invalid.
else
    echo "Error: Unsupported operating system ["$os"]."
    exit 1
fi

# python requirements:
file=$requirements_dir"/requirements.txt"
if [[ -f "$file" ]] ; then
    echo "Installing PIP requirements..."
    pip3 install -r $file 2> /dev/null # prevent the possible upgrade pip error.
fi

# install pypi package.
if [[ "$pypi_package" == "true" ]] ; then
    pip3 install $current_installation 2> /dev/null
fi

# install alias.
if [[ "$create_alias" == "false" ]] ; then
    python3 $package --create-alias $alias --sudo
fi

# regular log for confirmation:
echo "Successfully installed $alias."
